<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xmlns:spring="http://www.springframework.org/schema/beans"
      xmlns:http="http://www.mulesoft.org/schema/mule/http"
      xmlns:https="http://www.mulesoft.org/schema/mule/https"
      xmlns:vm="http://www.mulesoft.org/schema/mule/vm"
      xmlns:scripting="http://www.mulesoft.org/schema/mule/scripting"
      xmlns:client="http://www.mulesoft.org/schema/mule/client"
      xmlns:context="http://www.springframework.org/schema/context"
      xmlns:rest="http://www.mulesoft.org/schema/mule/rest"
      xmlns:mongo="http://www.mulesoft.org/schema/mule/mongo"
      xmlns:mule-ss="http://www.mulesoft.org/schema/mule/spring-security"
      xmlns:ss="http://www.springframework.org/schema/security"
      xsi:schemaLocation="
        http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/3.2/mule.xsd
        http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/3.2/mule-http.xsd
        http://www.mulesoft.org/schema/mule/https http://www.mulesoft.org/schema/mule/https/3.2/mule-https.xsd
        http://www.mulesoft.org/schema/mule/vm http://www.mulesoft.org/schema/mule/vm/3.2/mule-vm.xsd
        http://www.mulesoft.org/schema/mule/scripting http://www.mulesoft.org/schema/mule/scripting/3.2/mule-scripting.xsd
        http://www.mulesoft.org/schema/mule/client http://www.mulesoft.org/schema/mule/client/3.2/mule-client.xsd
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        http://www.mulesoft.org/schema/mule/rest http://www.mulesoft.org/schema/mule/rest/1.0/mule-rest.xsd
        http://www.mulesoft.org/schema/mule/mongo http://www.mulesoft.org/schema/mule/mongo/2.0/mule-mongo.xsd
        http://www.mulesoft.org/schema/mule/spring-security http://www.mulesoft.org/schema/mule/spring-security/3.2/mule-spring-security.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.0.xsd">

    <description>

    </description>

    <rest:config/>

    <scripting:transformer name="getasdbo">
        <scripting:script engine="groovy">
            <![CDATA[
					import com.mongodb.BasicDBObject;
					def dbo = new BasicDBObject(message.getInvocationProperty('queryMap'))

					println message.getInvocationProperty('queryMap')
					if(message.getInvocationProperty('iapp')){
					    dbo.put('iapp',message.getInvocationProperty('iapp'))
					}
					if(message.getInvocationProperty('customer')){
					    dbo.put('customer',message.getInvocationProperty('customer'))
					}
					if(message.getInvocationProperty('lookup-name')){
					    dbo.put('lookup-name',message.getInvocationProperty('lookup-name'))
					}
                    println 'dbo = '+dbo
					return dbo
					]]>
        </scripting:script>
    </scripting:transformer>


    <https:connector name="httpsConnector">
        <https:tls-client path="${app.home}/truststore"
                          storePassword="MuleSoft1" />
        <https:tls-key-store path="keystore" keyPassword="${keystore.password}"
                             storePassword="${keystore.password}" />
    </https:connector>

    <mongo:config database="test" host="localhost" port="27017"
                  username="admin" password="admin"/>

    <flow name="main">
        <http:inbound-endpoint host="localhost" port="${http.port}"/>
        <logger message="#[payload:]" level="ERROR"/>
        <rest:router templateUri="/customer">

            <rest:post>
                <object-to-string-transformer/>
                <mongo:json-to-dbobject/>

                <mongo:insert-object collection="customer"
                                     dbObject-ref="#[payload:]"/>
                <logger message="payload with id is #[payload:]" level="ERROR" />
                <expression-transformer evaluator="groovy"
                                        expression="new com.mongodb.BasicDBObject('_id', new org.bson.types.ObjectId(payload))"/>
                <mongo:find-objects collection="customer" query-ref="#[payload:]"/>

                <mongo:dbobject-to-json/>
            </rest:post>

        </rest:router>
        <rest:router templateUri="/lookup/{iapp}/{customer}/{lookup-name}/{id}">
            <rest:delete>
                <object-to-string-transformer/>
                <logger message="IN DELETE: #[payload:]" level="ERROR"/>
                <!-- Need to add verification of correct customer, iapp and lookup here.-->
                <expression-transformer evaluator="groovy"
                                        expression="new com.mongodb.BasicDBObject('_id', new org.bson.types.ObjectId(message.getInvocationProperty('id')))"/>
                <mongo:remove-objects collection="lookup" query-ref="#[payload:]"/>
                <mongo:dbobject-to-json/>
            </rest:delete>

        </rest:router>
        <rest:router templateUri="/lookup/{iapp}/{customer}/{lookup-name}">
            <rest:get>
                <message-properties-transformer scope="invocation">
                    <add-message-property key="queryMap" value="#[http-header:]"/>
                </message-properties-transformer>
                <transformer ref="getasdbo"/>

                <mongo:find-objects collection="lookup" query-ref="#[payload:]">
                    <mongo:fields ref=""/>
                </mongo:find-objects>
                <mongo:dbobject-to-json/>
            </rest:get>
            <rest:post>
                <object-to-string-transformer/>
                <mongo:json-to-dbobject/>
                <scripting:transformer name="updatehack">
                    <scripting:script engine="groovy">
                        <![CDATA[
					import com.mongodb.BasicDBObject;
                    def dbo = new BasicDBObject()
                    dbo.put('$set', payload )
                    message.setInvocationProperty('update',dbo)
					return payload
					]]>
                    </scripting:script>
                </scripting:transformer>
                <message-properties-transformer scope="invocation">
                    <add-message-property key="queryMap" value="#[http-header:]"/>
                </message-properties-transformer>
                <transformer ref="getasdbo"/>

                <mongo:update-objects collection="lookup" query-ref="#[payload:]" element-ref="#[variable:update]" upsert="true"/>
                <mongo:dbobject-to-json/>
            </rest:post>

        </rest:router>
        <rest:router templateUri="/lookup/{iapp}/{customer}">
            <rest:get>
                <message-properties-transformer scope="invocation">
                    <add-message-property key="queryMap" value="#[http-header:]"/>
                </message-properties-transformer>
                <transformer ref="getasdbo"/>

                <mongo:find-objects collection="lookup" query-ref="#[payload:]">
                </mongo:find-objects>
                <mongo:dbobject-to-json/>
            </rest:get>

        </rest:router>
        <rest:router templateUri="/lookup">
            <rest:post>
                <object-to-string-transformer/>
                <mongo:json-to-dbobject/>
                <logger message="#[payload:]" level="ERROR"/>
                <mongo:insert-object collection="lookup"
                                     dbObject-ref="#[payload:]"/>
                <logger message="insert result = #[payload:]" level="ERROR"/>

                <object-to-string-transformer/>
            </rest:post>
        </rest:router>



    </flow>

    <flow name="testbasicauth">
        <http:inbound-endpoint host="localhost" port="${http.port}" path="testauth"/>
        <logger level="ERROR"/>

    </flow>

</mule>
